/**
 *  OpenCCO implementation 
 *  Copyright (C) 2023 B. Kerautret;  Phuc Ngo, N. Passat H. Talbot and C. Jaquet
 *
 *  This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
 **/


#include "GeomHelpers.h"
#include "ExpandTreeHelpers.h"

#include "DGtal/io/boards/Board2D.h"
#include "DGtal/io/readers/PPMReader.h"
#include "DGtal/io/readers/PGMReader.h"
#include "DGtal/io/readers/GenericReader.h"
#include "DGtal/io/colormaps/GradientColorMap.h"

#include "DGtal/images/ArrayImageIterator.h"
#include "DGtal/base/Common.h"
#include "DGtal/helpers/StdDefs.h"
#include "DGtal/geometry/helpers/ContourHelper.h"

#include <math.h>


template< class DomCtr, int TDim>
inline
typename CoronaryArteryTree<DomCtr, TDim>::Segment
CoronaryArteryTree<DomCtr, TDim>::updateResistanceFromRoot(unsigned int segIndex) {
  if(segIndex != 0) {
    //Update HydroResistance
    double l = getLengthSegment(segIndex);
    myVectSegments[segIndex].myResistance = 8.0*my_mu*l/M_PI;
    if(myVectChildren[segIndex].first==0 && myVectChildren[segIndex].second==0)
      return myVectSegments[segIndex];
    
    std::pair<int, int> children = myVectChildren[segIndex];
    int segIndexLeft = children.first;
    int segIndexRight = children.second;
    //Update resitance of the two children segments
    Segment sLeft = updateResistanceFromRoot(segIndexLeft);
    Segment sRight = updateResistanceFromRoot(segIndexRight);
    
    //Update beta of the two children segments
    double segFlow = myVectSegments[segIndexLeft].myFlow;
    double brotherFlow = myVectSegments[segIndexRight].myFlow;
    double segHydro = myVectSegments[segIndexLeft].myResistance;
    double brotherHydro = myVectSegments[segIndexRight].myResistance;
    //ratio of radii of two brother segments
    double ratioR = pow((segFlow*segHydro) / (brotherFlow*brotherHydro), 0.25);
    //ratio of radii of current segment wrt the parent segment
    myVectSegments[segIndexLeft].myBeta = pow(1.0/(1+pow(ratioR,-my_gamma)),1.0/my_gamma);
    myVectSegments[segIndexRight].myBeta = pow(1.0/(1+pow(1.0/ratioR,-my_gamma)),1.0/my_gamma);
    //Compute resistance of parent segment
    double r1 = myVectSegments[segIndexLeft].myBeta;
    double r2 = myVectSegments[segIndexRight].myBeta;
    myVectSegments[segIndex].myResistance += 1.0/((r1*r1*r1*r1)/sLeft.myResistance + (r2*r2*r2*r2)/sRight.myResistance) ;
  }
  return myVectSegments[segIndex];
}

template< class DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::updateFlow(unsigned int segIndex)
{
  Segment sC = myVectSegments[segIndex];
  while (sC.myIndex != 0){
    myVectSegments[sC.myIndex].myKTerm ++;
    myVectSegments[sC.myIndex].myFlow = myVectSegments[sC.myIndex].myKTerm*my_qTerm;
    sC = myVectSegments[myVectParent[sC.myIndex]];
  }
}

template< class DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::updateLengthFactor()
{
  double r_pk = sqrt(myKTerm + 1)*myRsupp;
    myLengthFactor =  r_pk / my_rPerf;
}


template< class DomCtr, int TDim>
void
CoronaryArteryTree<DomCtr, TDim>::updateRadius(unsigned int segIndex, double beta)
{
  if(myVectChildren[segIndex].first!=0 && myVectChildren[segIndex].second!=0) {
    //update radii left and right children
    Segment sLeft = myVectSegments[myVectChildren[segIndex].first];
    Segment sRight = myVectSegments[myVectChildren[segIndex].second];
    double bL = beta * sLeft.myBeta;
    double bR = beta * sRight.myBeta;
    updateRadius(sLeft.myIndex, bL);
    updateRadius(sRight.myIndex, bR);
    myVectSegments[myVectChildren[segIndex].first].myRadius = myVectSegments[1].myRadius*bL;
    myVectSegments[myVectChildren[segIndex].second].myRadius = myVectSegments[1].myRadius*bR;
  }
}

template< class DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::updateRootRadius()
{
  unsigned int idRoot = 1;
  double Qpk = myVectSegments[idRoot].myKTerm*my_qTerm;
  double rRoot = pow((myVectSegments[idRoot].myResistance*Qpk)/my_pDrop,0.25);
  myVectSegments[idRoot].myRadius = rRoot;
  updateRadius(idRoot, 1.0);
}


template< class DomCtr, int TDim >
double
CoronaryArteryTree<DomCtr, TDim>::getLengthSegment(unsigned int segIndex)
{
  if(segIndex==0) return 0; //there is no parent segment
  TPointD p1 = myVectSegments[segIndex].myCoordinate;
  TPointD p2 = myVectSegments[myVectParent[segIndex]].myCoordinate;
  return (p1-p2).norm()*myLengthFactor;
}

template< class DomCtr, int TDim >
double
CoronaryArteryTree<DomCtr, TDim>::computeTotalVolume(unsigned int segIndex)
{
  //Volumn of current segment : Eq 20
  double l = getLengthSegment(segIndex);
  double r = myVectSegments[segIndex].myRadius;
  double v = myVectSegments[segIndex].myRadius
            * myVectSegments[segIndex].myRadius
            * getLengthSegment(segIndex);
  double vL, vR;
  if(myVectChildren[segIndex].first!=0 && myVectChildren[segIndex].second!=0) {
    vL = computeTotalVolume(myVectChildren[segIndex].first);
    vR = computeTotalVolume(myVectChildren[segIndex].second);
    v += vL + vR;
  }
  return v;
}

template< class DomCtr, int TDim >
bool
CoronaryArteryTree<DomCtr, TDim>::isAddable(const TPointD &p, unsigned int segIndex,
                              unsigned int nbIter, double tolerance,
                              unsigned int nbNeibour, bool verbose)
{
  typedef typename DomCtr::TPoint::Component TCompPt;
  TPointD pOpt, newCenter = findBarycenter(p, segIndex);
  TPoint newCenterDom;
  for (auto i=0; i < TDim; i++){newCenterDom[i] = static_cast<TCompPt>(newCenter[i]);}
  TPoint pDom; for (auto i=0; i < TDim; i++){pDom[i] = static_cast<TCompPt>(p[i]);}

  TPoint pSegIndDom; for (auto i=0; i < TDim; i++){pSegIndDom[i] = static_cast<TCompPt>(myVectSegments[segIndex].myCoordinate[i]);}
  
  if (!myDomainController().isInside(newCenterDom))
  {
      return false;
  }
    
  if (!myDomainController().checkNoIntersectDomain(pDom, newCenterDom))
  {
      return false;
  }
  
  if(!myDomainController().checkNoIntersectDomain(pSegIndDom,
                                                 newCenterDom))
  {
      return false;
  }
      
  // Creation a copy of parent segment
  Segment sParent = myVectSegments[myVectParent[segIndex]];
  TPointD pParent = sParent.myCoordinate;
  TPoint pParentDom;
  for (auto i=0; i < TDim; i++){
      pParentDom[i] = static_cast<TCompPt>(pParent[i]);
  }

  if(!myDomainController().checkNoIntersectDomain(pParentDom,
                                                newCenterDom))
      return false;
  
  // Creation of the left child
  Segment sNewLeft;
  sNewLeft.myCoordinate = myVectSegments[segIndex].myCoordinate;
  sNewLeft.myIndex = (unsigned int) myVectSegments.size();
  sNewLeft.myRadius = myVectSegments[segIndex].myRadius;
  sNewLeft.myFlow = myVectSegments[segIndex].myFlow;
  sNewLeft.myKTerm = myVectSegments[segIndex].myKTerm;
  sNewLeft.myResistance = myVectSegments[segIndex].myResistance;
  // Creation of the right child
  Segment sNewRight;
  sNewRight.myCoordinate = p;
  sNewRight.myIndex = (unsigned int) myVectSegments.size()+1;
  sNewRight.myRadius = myVectSegments[segIndex].myRadius;
  sNewRight.myFlow = my_qTerm;
  sNewRight.myKTerm = 1;
  // Cretation a copy of center segment
  Segment sCurrent = myVectSegments[segIndex];
  sCurrent.myCoordinate = newCenter;
  sCurrent.myFlow = myVectSegments[segIndex].myFlow + my_qTerm;
  sCurrent.myKTerm = sNewLeft.myKTerm + 1;
  
  //center of the current segment
  TPointD pCurrent = (sParent.myCoordinate+sNewLeft.myCoordinate)/2.0;
  double r0 = sCurrent.myRadius, r1 = sCurrent.myRadius, r2 = sCurrent.myRadius;
  bool res1 = true, res2 = false, res3 = true, res4 = false, isDone = false;
  double vol = -1, volCurr = -1, diffVol = -1;
  CoronaryArteryTree cTreeCurr = *this;
  if (verbose)
  {
    DGtal::trace.info() <<"---------- segIndex: "<<segIndex<<std::endl;
  }
  size_t i=0;
  for(size_t i=0; i<nbIter && !isDone; i++)
  {
    res1 = kamyiaOptimization(pCurrent, pParent, sCurrent.myRadius,
                              sNewLeft, sNewRight, 1, pOpt, r0, r1, r2);
    if(!res1) //Kamyia does not have solution
      return false;
    
    //Check for middle seg
    int idSegPar = myVectParent[segIndex];
    int idL = myVectChildren[idSegPar].first;
    int idR = myVectChildren[idSegPar].second;
    res2 = isIntersectingTree(pOpt, pParent, r0, std::make_tuple(idL, idR, idSegPar));
    if(res2) //there is intersection between segments
      return false;
    
    //Check for left seg
    idL = myVectChildren[segIndex].first;
    idR = myVectChildren[segIndex].second;
    res2 = isIntersectingTree(pOpt, sNewLeft.myCoordinate, r1,  std::make_tuple(segIndex, idL, idR));
    if(res2) //there is intersection between segments
      return false;
      
    //Check for right seg
    res2 = isIntersectingTree(pOpt, p, r2,  std::make_tuple(segIndex,-1,-1));
    if(res2) //there is intersection between segments
      return false;
    
    TPoint pParentDom; for (auto i=0; i < TDim; i++){pParentDom[i] = static_cast<int>(pParent[i]);}
    TPoint pOptDom; for (auto i=0; i < TDim; i++){pOptDom[i] = static_cast<int>(pOpt[i]);}
    TPoint sNewLeftDom; for (auto i=0; i < TDim; i++){sNewLeftDom[i] = static_cast<int>(sNewLeft.myCoordinate[i]);}
    TPoint sNewRightDom; for (auto i=0; i < TDim; i++){sNewRightDom[i] = static_cast<int>(sNewRight.myCoordinate[i]);}

    if(!myDomainController().isInside(pOptDom))
    { //resulting point is out of the domain
      return false;
    }
   
    
    //resulting segments intersect the domain
    if( !myDomainController().checkNoIntersectDomain(pParentDom, pOptDom)) //Center segment
      return false;
    if(!myDomainController().checkNoIntersectDomain(sNewLeftDom, pOptDom)) //Left segment
      return false;
    if(!myDomainController().checkNoIntersectDomain(sNewRightDom, pOptDom)) //Right segment
      return false;
    
    //Otherwise, iterate for the optimisation process
    CoronaryArteryTree cTree1 = *this;
    //Update optimal values
    sNewLeft.myRadius = r1;
    sNewRight.myRadius = r2;
    
    //Add left segment
    cTree1.myVectSegments.push_back(sNewLeft);
    cTree1.myVectChildren.push_back(std::pair<unsigned int, unsigned int>(0,0));
    cTree1.myVectParent.push_back(segIndex);
    
    // Update for the new parent of the new left segment
    unsigned int leftGrandChildIndex = cTree1.myVectChildren[myVectSegments[segIndex].myIndex].first;
    unsigned int rightGrandChildIndex = cTree1.myVectChildren[myVectSegments[segIndex].myIndex].second;
    cTree1.myVectParent[leftGrandChildIndex] = sNewLeft.myIndex;
    cTree1.myVectParent[rightGrandChildIndex] = sNewLeft.myIndex;
    
    // Update of the child of the new left segment (sNewLeft)
    cTree1.myVectChildren[sNewLeft.myIndex].first = leftGrandChildIndex;
    cTree1.myVectChildren[sNewLeft.myIndex].second = rightGrandChildIndex;
    
    //Add right segment
    cTree1.myVectSegments.push_back(sNewRight);
    cTree1.myVectChildren.push_back(std::pair<unsigned int, unsigned int>(0,0));
    cTree1.myVectParent.push_back(segIndex);
    cTree1.myVectTerminals.push_back(sNewRight.myIndex);
    
    // Update center segment
    cTree1.myVectSegments[segIndex].myCoordinate = pOpt;
    cTree1.myVectSegments[segIndex].myRadius = r0;
    cTree1.myVectSegments[segIndex].myKTerm = sCurrent.myKTerm;
    cTree1.myVectSegments[segIndex].myFlow = sCurrent.myFlow;
    //update childrens of center segment
    cTree1.myVectChildren[segIndex].first = sNewLeft.myIndex;
    cTree1.myVectChildren[segIndex].second = sNewRight.myIndex;
    
    // update parameters
    cTree1.myKTerm++;
    // Update physiological paramaters
    cTree1.updateFlow(cTree1.myVectParent[segIndex]);
    cTree1.updateResistanceFromRoot();
    cTree1.updateRootRadius();
    
    // Compute vol of the current tree
    vol = cTree1.computeTotalVolume();
    if (verbose){
      DGtal::trace.info() <<"Iter "<<i<<" has tree Volume: "<< vol <<std::endl;
    }
    if(i==0) {
      volCurr = vol;
      cTreeCurr = cTree1;
    }
    else {
      diffVol = volCurr - vol;
      if(fabs(diffVol) < tolerance)
      {
        // Verify the degenerate case of the resulting segment
        double l0 = (pOpt - pParent).norm()*myLengthFactor;
        double l1 = (pOpt - sNewLeft.myCoordinate).norm()*myLengthFactor;
        double l2 = (pOpt - sNewRight.myCoordinate).norm()*myLengthFactor;
        res3 = (2*r0<=l0) && (2*r1<=l1) && (2*r2<=l2);
        // If there is a solution, then save the result
        if(res3)
        {
          //std::cout<<"Best volume at "<<i<<std::endl;
          isDone = true;
          *this = cTree1;
        }
      }
      else
      {
        volCurr = vol;
        cTreeCurr = cTree1;
      }
    }
    
    //update new position, radius and flow
    pCurrent = pOpt;
    sCurrent.myRadius = cTree1.myVectSegments[segIndex].myRadius;
    sNewLeft.myRadius = cTree1.myVectSegments[cTree1.myVectChildren[segIndex].first].myRadius;
    sNewLeft.myFlow = cTree1.myVectSegments[cTree1.myVectChildren[segIndex].first].myFlow;
    sNewRight.myRadius = cTree1.myVectSegments[cTree1.myVectChildren[segIndex].second].myRadius;
    sNewRight.myFlow = cTree1.myVectSegments[cTree1.myVectChildren[segIndex].second].myFlow;
  }
    
  
  return isDone;
}




template<typename DomCtr, int TDim >
bool
CoronaryArteryTree<DomCtr, TDim>::isIntersectingTree(const TPointD &ptA, const TPointD &ptB, double r, unsigned int idSeg) const
{
  //Get coordinates of points
  Segment sParent = myVectSegments[myVectParent[idSeg]];
  Segment sNewLeft = myVectSegments[idSeg];
  Segment sNewRight;
  sNewRight.myCoordinate = ptA;

  //Check for middle seg
  int idSegPar = myVectParent[idSeg];
  int idL = myVectChildren[idSegPar].first;
  int idR = myVectChildren[idSegPar].second;
  bool res2 = isIntersectingTree(ptB, sParent.myCoordinate, r, std::make_tuple(idL, idR, idSegPar));
  if(res2) //there is intersection betweeen segments
    return true;
  
  //Check for left seg
  idL = myVectChildren[idSeg].first;
  idR = myVectChildren[idSeg].second;
  res2 = isIntersectingTree(ptB, sNewLeft.myCoordinate, r, std::make_tuple(idSeg, idL, idR));
  if(res2) //there is intersection betweeen segments
    return true;
    
  //Check for right seg
  res2 = isIntersectingTree(ptB, ptA, r, std::make_tuple(idSeg,-1,-1));
  if(res2) //there is intersection betweeen segments
    return true;
    
  return false;
}



template<class DomCtr, int TDim >
bool
CoronaryArteryTree<DomCtr, TDim>::isIntersectingTree(const TPointD &ptA, const TPointD &ptB, double r, std::tuple<int, int, int> idExcept) const
//int idExcept1, int idExcept2,  int idExcept3) const
{
  int idExcept1 = std::get<0>(idExcept);
  int idExcept2 = std::get<1>(idExcept);
  int idExcept3 = std::get<2>(idExcept);
  if(idExcept1==0 || idExcept2==0 || idExcept3==0) //root segment
    return false;
  for(auto s : myVectSegments) {
    //s.myIndex = 0 is the root segment
    if(s.myIndex !=0 && s.myIndex != idExcept1 && s.myIndex != idExcept2 && s.myIndex != idExcept3) {
      TPointD ptC = s.myCoordinate;
      TPointD ptD = myVectSegments[myVectParent[s.myIndex]].myCoordinate;
      if(GeomHelpers::isIntersecting<TDim>(ptA, ptB, r, ptC, ptD, s.myRadius)) {
        //std::cout<<"Seg bug :"<<s.myIndex<<" ==> seg expt :"<<idExcept1<<", "<<idExcept2<<", "<<idExcept3<<std::endl;
        return true;
      }
    }
  }
  return false;
}


template< class DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::boardDisplay(double thickness, bool clearDisplay)
{
  double scaleFactorEPS = 0.01;
  myBoard.setUnit(scaleFactorEPS, LibBoard::Board::UCentimeter);

  if (clearDisplay){
    myBoard.clear(DGtal::Color::White);
  }

  // color gradient for the vessels, depending on the value of the log of the flow
  DGtal::GradientColorMap<float> cmap_grad(std::log(my_qTerm), std::log(my_qPerf));
  cmap_grad.addColor( DGtal::Color( 79, 162, 198 ) );   // blue
  //cmap_grad.addColor( DGtal::Color( 255, 0, 0 ) );      // red
  cmap_grad.addColor( DGtal::Color( 200, 10, 10 ) );    // red

  // 57.5 from myBoard change scale
  double scaleBoard = 57.5*scaleFactorEPS;
  
  /*
  // drawing base circle when the domain is circular
  if (std::is_same<DomCtr, CircularDomainCtrl<TDim>>::value)
  {
    myBoard.setPenColor(DGtal::Color::Blue);
    myBoard.setLineWidth(myVectSegments[0].myRadius*scaleBoard*thickness);
    myBoard.drawCircle(myTreeCenter[0], myTreeCenter[1], my_rPerf, 1);
  }
  */
  
  unsigned int i = 0;
  for (auto s : myVectSegments)
  {
    // test if the segment is the first (root's parent), we do not display it.
    if (s.myIndex == 0)
      continue;

    // computing the color of the segment
    DGtal::Color segcolor = cmap_grad(std::log(myVectSegments[s.myIndex].myFlow));            // color from cmap
    //uint8_t alpha = 255 * (0.18 + 0.82 * myVectSegments[s.myIndex].myRadius / myVectSegments[1].myRadius);  // transparency
    //myBoard.setPenColorRGBi(segcolor.red(), segcolor.green(), segcolor.blue(), alpha);
    myBoard.setPenColor(segcolor);

    // segment width
    double segwidth = myVectSegments[s.myIndex].myRadius * scaleBoard * thickness;
    
    // start and end of segment
    TPointD proxital = myVectSegments[myVectParent[s.myIndex]].myCoordinate;
    TPointD distal = s.myCoordinate;

    // draw the body of the segment
    myBoard.setLineWidth(segwidth);
    myBoard.drawLine(distal[0], distal[1], proxital[0], proxital[1],2);

    // draw the tip of the segment
    //myBoard.fillCircle(distal[0], distal[1], myVectSegments[s.myIndex].myRadius * thickness, 1 );
    i++;
  }

  if (std::is_same<DomCtr, ImageMaskDomainCtrl<TDim>>::value)
  {
    auto vectContours = myDomainController().contours();//ExpandTreeHelpers::getImageContours(myDomainController().myImage, myForegroundThreshold);
    for(auto const c: vectContours){
      DGtal::Color col;
      if(DGtal::ContourHelper::isCounterClockWise(c)){
        col = DGtal::Color(200, 200, 200);
      }else{
        col = DGtal::Color::White;
      }
      std::vector<LibBoard::Point> bv;
      for(unsigned int i=0; i<c.size(); i++){
        bv.push_back(LibBoard::Point(c[i][0], c[i][1]));
      }
      myBoard.setFillColor(col);
      myBoard.setLineWidth(5.0*scaleFactorEPS);
      myBoard.fillPolyline(bv);
      myBoard.drawPolyline(bv);
    }
  }
}

template< class DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::exportBoardDisplay(const std::string &fileName,
                                       double thickness,
                                       bool updateDisplay,
                                       bool clearDisplay){
  if (updateDisplay){
    boardDisplay(thickness, clearDisplay);
  }
  if (std::is_same<DomCtr, ImageMaskDomainCtrl<TDim>>::value)
  {
    myBoard.drawDot(0, 0);
    myBoard.drawDot(myDomainController().upperBound()[0],
                    myDomainController().upperBound()[1]);

  }
  std::string ext = fileName.substr(fileName.find_last_of(".") + 1);
  if (ext == "svg")
  {
    myBoard.saveSVG(fileName.c_str());
  }
  else if (ext == "eps") {
    myBoard.saveEPS(fileName.c_str());
  }
}

template< class DomCtr, int TDim >
unsigned int
CoronaryArteryTree<DomCtr, TDim>::getNearestSegment(const TPointD &pt)
{
  unsigned int sNear=1;
  double distMin = getProjDistance(myVectSegments[0].myCoordinate,
                                   myVectSegments[1].myCoordinate, pt);
  for (const auto &s: myVectSegments)
  {
    if (s.myIndex==0)
      continue;
    
    double d = getProjDistance(s.myCoordinate,
                              myVectSegments[myVectParent[s.myIndex]].myCoordinate, pt);

    if (d < distMin)
    {
      distMin = d;
      sNear = s.myIndex;
    }
  }
  return sNear;
}


template< class DomCtr, int TDim >
std::vector<unsigned int>
CoronaryArteryTree<DomCtr, TDim>::getPathToRoot(const Segment &s)
{
  std::vector<unsigned int> res;
  Segment sC = s;
  while (sC.myIndex != 0){
    res.push_back(sC.myIndex);
    sC = myVectSegments[ myVectParent[sC.myIndex]];
  }
  return res;
}

template< class DomCtr, int TDim >
typename CoronaryArteryTree<DomCtr, TDim>::TPointD
CoronaryArteryTree<DomCtr, TDim>::generateNewLocation(unsigned int nbTrials){
  TPointD  res;
  double myDThresold = getDistanceThreshold();
  bool found = false;
  unsigned int n = nbTrials;
  while(!found && n >= 0) {
    n--;
    auto p =  generateALocation(myDThresold);
    found = p.second;
    if (found) {
      res = p.first;
    }
    if (n==0) {
      n = nbTrials;
      myDThresold *= 0.9;
    }
  }
  return res;
}

template< typename DomCtr, int TDim >
std::pair<typename CoronaryArteryTree<DomCtr, TDim>::TPointD, bool>
CoronaryArteryTree<DomCtr, TDim>::generateALocation(double myDThresold) {
    TPointD res;
    res = myDomainController().randomPoint();
    bool isComp = true;
    bool isComp2 = true;
    unsigned int id = 1;
    
    // generated point must be a certain distance away to all terminal points
    while ( isComp && id < myVectTerminals.size() ) {
      isComp = (myVectSegments[myVectTerminals[id]].myCoordinate - res).norm() > myDThresold;
     //isComp = getProjDistance(myVectTerminals[id], res) > myDThresold;
      id++;
    }

    // reset id
    id = 1;
    
    //generated point must be a certain distance away to ALL tree segments
    while ( isComp2 && id < myVectSegments.size() ) {
      isComp2 = getProjDistance(myVectSegments[id].myIndex, res) > myVectSegments[id].myRadius;
      id++;
    }
    return  std::pair<TPointD, bool> {res, isComp && isComp2};
}


template< typename DomCtr, int TDim >
bool
CoronaryArteryTree<DomCtr, TDim>::isToCloseFromNearest(const TPointD &p, double minDist) const{
  double d = getProjDistance(getN_NearestSegments(p,1)[0],p);
  return d < minDist;
}

template<typename DomCtr, int TDim >
double
CoronaryArteryTree<DomCtr, TDim>::getProjDistance(const TPointD &p0, const TPointD &p1, const TPointD &p) const{
  double result = 0.0;
  TPointD pProj(0,0);
  bool isInside = GeomHelpers::projectOnStraightLine(p0, p1, p, pProj);
  if (isInside)
  {
    result = (pProj-p).norm();
  }
  else
  {
    result = std::min((p0-p).norm(), (p1-p).norm());
  }

  return result;
}

template<typename DomCtr, int TDim >
double
CoronaryArteryTree<DomCtr, TDim>::getProjDistance(unsigned int index, const TPointD &p ) const {
  TPointD p0 = myVectSegments[index].myCoordinate;
  TPointD p1 = myVectSegments[myVectParent[index]].myCoordinate;
  return  getProjDistance(p0, p1, p);
}

template< typename DomCtr, int TDim >
std::vector<unsigned int>
CoronaryArteryTree<DomCtr, TDim>::getN_NearestSegments(const TPointD &p, unsigned int n) const {
  std::vector<unsigned int> res;
  res.push_back(1);
  for (unsigned int i=2; i < myVectSegments.size(); i++){
    double d = getProjDistance(i, p);
    std::vector<unsigned int>::iterator it = res.end();
    int k = (int)(res.size())-1;
    while ( k >= 0 && getProjDistance(res[k], p)>=d ){
      k--;
      it--;
    }
    res.insert(it, i);
    if (res.size() > n){
      res.pop_back();
    }
  }
  return res;
}

template< typename DomCtr, int TDim >
bool
CoronaryArteryTree<DomCtr, TDim>::kamyiaOptimization(const TPointD& pCurrent,
                                       const TPointD& pParent,
                                       double rCurrent,
                                       const Segment& sL,
                                       const Segment& sR,
                                       unsigned int nbIter,
                                               TPointD& pOpt,
                                       double& r0, double& r1, double& r2){
  
  // Prepare
  TPointD pL = sL.myCoordinate;
  TPointD pR = sR.myCoordinate;
  
  //std::cout<<"myFlow="<< myVectSegments[index].myFlow<<" and sL.myFlow="<<sL.myFlow<<" and sR.myFlow="<<sR.myFlow<<std::endl;
  //double ratioQ = sL.myFlow/sCurrent.myFlow;//0.5;
  //std::cout<<"ratioQ="<< ratioQ<<std::endl;
  //double rr0 = sCurrent.myRadius;
  double R0 = rCurrent*rCurrent;//rr0*rr0; //R0 = r0*r0
  double R1 = sL.myRadius*sL.myRadius;//rr0*rr0; //R1 = r1*r1
  double R2 = sR.myRadius*sR.myRadius;//rr0*rr0; //R2 = r2*r2
  
  double f1 = sL.myFlow;//ratioQ*f0;//k * r1*r1*r1; //left
  double f2 = sR.myFlow;//(1.0-ratioQ)*f0;//k * r2*r2*r2; //right
  double f0 =  f1 + f2;//R0*R0*R0; //middle
  // Starting position from Equation (21) for initialisation as mentionned page 11 [Clara Jaquet et HT]
  //TPoint pb ((f0*pParent[0]+f1*pL[0]+f2*pR[0])/(2.0*f0), (f0*pParent[1]+f1*pL[1]+f2*pR[1])/(2.0*f0));
  //TPoint pb ((pParent[0]+pL[0])/(2.0), (pParent[1]+pL[1])/(2.0)); //center of the old segment
  
  TPointD pb;//TPointD pb (pCurrent[0], pCurrent[1]);
  for (auto i=0; i < TDim; i++){pb[i] = pCurrent[i];}
  
  //std::cout<<"Init:"<<pb<<std::endl;
  double l0 = (pParent - pb).norm()*myLengthFactor;
  double l1 = (pL - pb).norm()*myLengthFactor;
  double l2 = (pR - pb).norm()*myLengthFactor;
  //std::cout<<"l0="<<l0<<", l1="<<l1<<", l2="<<l2<<std::endl;
  double kappa = 8 * my_mu / M_PI;
  double deltaP1k = kappa*((f0*l0)/(R0*R0)+(f1*l1)/(R1*R1));
  double deltaP2k = kappa*((f0*l0)/(R0*R0)+(f2*l2)/(R2*R2));
  double deltaP1 = (f0*l0)/(R0*R0)+(f1*l1)/(R1*R1);
  double deltaP2 = (f0*l0)/(R0*R0)+(f2*l2)/(R2*R2);
  
  double rr1 = R1;
  double rr2 = R2;
  
  // The variable to solve for with its initial value. It will be
  // mutated in place by the solver.
  
  bool hasSolution = true;
  
  for (int i = 0; i<nbIter && hasSolution; i++) {
    //DGtal::trace.progressBar(i, nbIter);
    hasSolution = GeomHelpers::kamyiaOpt(my_gamma, deltaP1, deltaP2, f0, f1, f2, l0, l1, l2,rr1, rr2);
    // Equation 27
    R0 = pow(f0*(pow(rr1, my_gamma)/f1 + pow(rr2, my_gamma)/f2), 1.0/my_gamma);
    R1 = rr1;
    R2 = rr2;
    // Equation (26) page 13
    //pb[0] = (pParent[0]*R0/l0 + pL[0]*R1/l1 + pR[0]*R2/l2)/(R0/l0+R1/l1+R2/l2);
    //pb[1] = (pParent[1]*R0/l0 + pL[1]*R1/l1 + pR[1]*R2/l2)/(R0/l0+R1/l1+R2/l2);
    for (auto i=0; i < TDim; i++){
      pb[i] = (pParent[i]*R0/l0 + pL[i]*R1/l1 + pR[i]*R2/l2)/(R0/l0+R1/l1+R2/l2);
    }
    
    //Update values
    deltaP1 = (f0*l0)/(R0*R0)+(f1*l1)/(R1*R1);
    deltaP2 = (f0*l0)/(R0*R0)+(f2*l2)/(R2*R2);
    l0 = (pParent - pb).norm()*myLengthFactor;
    l1 = (pL - pb).norm()*myLengthFactor;
    l2 = (pR - pb).norm()*myLengthFactor;
    //std::cout << "r0 : " << sqrt(R0) << ", r1 : " << sqrt(R1) << ", sqrt(R2) : " << sqrt(R2) << "\n";
    //std::cout << "R0 : " << R0 << ", R1 : " << R1 << ", R2 : " << R2 << "\n";
    //std::cout << "pbNew[0]  : " << pb[0] << " and pbNew[1] " << pb[1] << "\n";
  }
  
  // If there is a solution, then update result
  if(hasSolution) {
    pOpt = pb;
    r0 = sqrt(R0);
    r1 = sqrt(R1);
    r2 = sqrt(R2);
  }
  return hasSolution;
}

template< typename DomCtr, int TDim >
void
CoronaryArteryTree<DomCtr, TDim>::selfDisplay( std::ostream & out ) const {
  out << std::endl << "----" << std::endl;
  out << "CoronaryArteryTree: " << std::endl;
  out << "main parameters: myKTerm: "  << myKTerm << "\n\t myRsupp: " <<myRsupp << std::endl;
  out << "\n\t Nb Segments from container: " << myVectSegments.size() << std::endl;
  out << "----" << std::endl;
}
template< typename DomCtr, int TDim >
typename CoronaryArteryTree<DomCtr, TDim>::TPoint CoronaryArteryTree<DomCtr,TDim>::getDomainCenter() const {
  if (!myDomainController().myIsImageDomainRestrained){
    return TPoint::diagonal(0);
  }
  else {
    // searching the farthest point of the border domain
    double maxDistance = 0;
    TPoint ptMax = TPoint::diagonal(0);
    for (auto p: myDomainController().myImage.domain()){
      if (myDomainController().myDistanceImage(p) >= maxDistance){
        ptMax = p;
        maxDistance = myImageDist(p);
      }
    }
    return ptMax;
  }
}

template<typename DomCtr, int TDim >

std::ostream&
operator<< ( std::ostream & out,
            const CoronaryArteryTree<DomCtr, TDim> & aCoronaryTree )
{
  aCoronaryTree.selfDisplay ( out );
  return out;
}



template< typename DomCtr, int TDim >
double
CoronaryArteryTree<DomCtr, TDim>::getDistanceThreshold(){
    // Check with python code, here is the equation after simplification
    if (TDim==3)
    {
        return pow(((4.0*M_PI*my_rPerf*my_rPerf*my_rPerf)/(3.0*myKTerm)),1.0/3.0);
    }
    else if(TDim==2) {
        return sqrt((M_PI*my_rPerf*my_rPerf)/myKTerm);
    }
    //Scale factor must be taken into account here
    //return sqrt((M_PI*(myKTerm + 1)*myRsupp*myRsupp)/myKTerm) / myLengthFactor;
}

template< typename DomCtr, int TDim >
typename CoronaryArteryTree<DomCtr, TDim>::TPointD
CoronaryArteryTree<DomCtr, TDim>::findBarycenter(const TPointD &p, unsigned int index)
{
  TPointD first_point=p;
  TPointD second_point=myVectSegments[index].myCoordinate;
  TPointD third_point=myVectSegments[myVectParent[index]].myCoordinate;
  TPointD barycenter;
  for(auto i=0; i<TDim; i++){
    barycenter[i]=(first_point[i]+second_point[i]+third_point[i])/3.0;
  }
  return barycenter;
}



template< typename DomCtr, int TDim >
bool operator==(typename CoronaryArteryTree<DomCtr, TDim>::Segment S1,
                typename CoronaryArteryTree<DomCtr, TDim>::Segment S2)
{
  if(S1.myCoordinate==S2.myCoordinate)
  {
    return true;
  }
  else
  {
    return false;
  }
}
template< typename DomCtr, int TDim >
bool operator!=(typename CoronaryArteryTree<DomCtr, TDim>::Segment  S1,
                typename CoronaryArteryTree<DomCtr, TDim>::Segment S2)
{
  if(S1.myCoordinate!=S2.myCoordinate)
  {
    return true;
  }
  else
  {
    return false;
  }
}



